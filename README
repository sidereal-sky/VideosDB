Object Oriented Programming Course
Homework - VideosDB
Alexandra-Maria Moroiu 325CA

File Structure:
    - action package:
        -- abstract class Action + Command, Query, Recom classes that extend it
        -- uses fileio.ActionInputData, Writer
    - actor package:
        -- Actor class and ActorAwards enum, uses fileio.ActorInputData
    - database:
        -- Database class that stores user, actor and video data + helper
        methods
    - entertainment:
        -- abstract class Video + Movie, Show classes that extend it
        -- Season class and Genre enum are used by Show
        -- uses fileio.ShowInput, SerialInputData, MovieInputData
    - filter:
        -- abstract class Filter and FilterActors, FilterVideos, FilterUsers
        that extend it
        -- FilterShows and FilterMovies extend FilterVideos
        -- each has filtering and sorting helper methods that filter the
        database
    - user:
        -- User class, uses fileio.UserInputData

Implementation:
    - based on the input data, actors, users, movies and tv shows are added to
    the database
    - next up, the actions are being read, and depending on the action type,
    command, query or recommendation objects are created
    - each of them has similar and separate parameters; based on those they
    execute different types of operations
    - command allows users to add a favourite video to their list, mark a video
    as viewed or rate one in case they haven't already
    - queries are global operations that inspect the whole database, N being the
     number of data to be displayed
        -- users: display the first N-th users that have been actively rating
        videos
        -- videos:
            * top N videos sorted by their rating
            * top N videos that have been added to favourite lists
            * top N videos sorted by their overall duration
            * top N videos sorted by the times they have been viewed
        -- actors:
            * top N actors sorted by the average rating of the videos they
            played in
            * top N actors sorted by the number of awards they have won
            * top N actors whose description contain certain keywords
     - recommendations are user requests related to videos
        -- all users:
            * standard: first video in the database they haven't watched
            * best unseen: best rated video they haven't watched
        -- only premium users:
            * popular: first video of the most popular genre they haven't
            watched
            * favorite: first favorite video they haven't watched
            * search: display best rated videos of a given genre they haven't
            watched

Sidenotes:
    - OOP design pattern-wise, I know this implementation is weak and I'm sorry
    for that; I would've researched more on singleton, visitor etc. if I
    started the homework earlier
    - if you have any recommendations regarding that, please let me know (on
    vmchecker or wherever you'd like), it would help me get a better grasp of
    recognizing design patterns
    - although this homework's main idea was really cool, it was so ambiguous;
    it took me a day to figure out what I actually need to do
    - lastly, I hope my implementation doesn't tilt you too much